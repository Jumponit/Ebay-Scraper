# The_Ebae.py
# The main program
# Taylor Morris & Nich Phillips & Lindsey Titus


from ebaysdk.finding import Connection as Finding
from ebaysdk.exception import ConnectionError
from datetime import datetime

# The method to parse the search response dictionary
def parseDict(dit):
        soldPrices = []
        results = dit.get('searchResult')
        itemList = results.get('item')
        for item in itemList:
            a = item.get('shippingInfo')
            if type(a) == dict:
                b = a.get('shippingServiceCost')
                if type(b) == dict:
                    c = b.get('value')
                    shipping = float(c)
                    d = item.get('sellingStatus')
                    if type(d) == dict:
                        e = d.get('convertedCurrentPrice')
                        if type(e) == dict:
                            f = e.get('value')
                            soldAmount = float(f)
                            soldPrices.append((shipping + soldAmount))
        return soldPrices

    #Test events
        #print len(soldPrices)
        #for x in soldPrices:
            #print x

# The function that searches via the Ebay API
def search(itemInfo):
    date = itemInfo.pop()
    item = itemInfo.pop()
    try:
        api = Finding(config_file = "ebay.yaml")
        api_request = {
            'keywords': item,
            'itemFilter': [
                {'name': 'SoldItemsOnly', 'value': True},
                {'name': 'LocatedIn', 'value': 'US'},
                {'name': 'EndTimeFrom', 'value': date}
            ]
        }
        response = api.execute('findCompletedItems', api_request)
        return response.dict()
    except ConnectionError as e:
        print(e)
        print(e.response.dict())

# The function to get input from the user
def aquire():
    info = []
    name = raw_input('Enter the full item name you want to search: ')
    info.append(name)
    right = False
    while(not right):
        datestr = raw_input('Enter the date you want to search back to in format yyyy-mm-dd: ')
        try:
            dt_start = datetime.strptime(datestr, '%Y-%m-%d')
            datestr += 'T00:00:00.000Z'
            right = True
        except ValueError:
            print "Incorrect format"
    info.append(datestr)
    return info

# The main events
itemInfo = aquire()
priceList = parseDict(search(itemInfo))
for x in priceList:
    print x
