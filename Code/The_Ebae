# The_Ebae.py
# The main program
# Taylor Morris & Nich Phillips & Lindsey Titus


from ebaysdk.finding import Connection as Finding
from ebaysdk.exception import ConnectionError
from datetime import date, timedelta
import numpy as np #requires a separate pip install
import matplotlib as mpl # requires a separate pip install
import matplotlib.pyplot as plt
import time
import Tkinter
from Tkinter import *

# agg backend is used to create plot as a .png
mpl.use('agg')

# The method to parse the search response dictionary
def parseDict(dit):
        soldPrices = []
        results = dit.get('searchResult')
        itemList = results.get('item')
        if (itemList != None):
            for item in itemList:
                a = item.get('shippingInfo')
                if type(a) == dict:
                    b = a.get('shippingServiceCost')
                    if type(b) == dict:
                        c = b.get('value')
                        shipping = float(c)
                        d = item.get('sellingStatus')
                        if type(d) == dict:
                            e = d.get('convertedCurrentPrice')
                            if type(e) == dict:
                                f = e.get('value')
                                soldAmount = float(f)
                                soldPrices.append((shipping + soldAmount))
            return soldPrices
        else :
            print "Error, invalid item name, no results"
    #Test events
        #print len(soldPrices)
        #for x in soldPrices:
            #print x

# The function that searches via the Ebay API
def search(itemInfo, pageNum):
    startDate = itemInfo[1]
    item = itemInfo[0]
    try:
        api = Finding(config_file = "ebay.yaml")
        api_request = {
            'keywords': item,
            'itemFilter': [
                {'name': 'SoldItemsOnly', 'value': True},
                {'name': 'LocatedIn', 'value': 'US'},
                {'name': 'EndTimeFrom', 'value': startDate}
            ],
            'paginationInput': [
                {'pageNumber': pageNum}
            ]
        }
        response = api.execute('findCompletedItems', api_request)
        #print response.dict()
        return response.dict()
    except ConnectionError as e:
        print(e)
        print(e.response.dict())

#The method that does the multi-page loop of the search
def createPriceList(itemInfo):
    page = 1
    response = search(itemInfo, page)
    pageOutput = response.get('paginationOutput')
    pageNumbers = pageOutput.get('totalPages')
    print "PageNumbers = %s" % pageNumbers
    if (int(pageNumbers) > 1):
        priceList = parseDict(response)
        page+= 1
        while page <= int(pageNumbers) and page < 100:
            print "Nap Time! Number: %s" % (page-1)
            time.sleep(2)
            if page < int(pageNumbers):
                print "OK! Next search!"
            priceList.extend(parseDict(search(itemInfo, page)))
            page+= 1
    else:
        priceList = parseDict(response)
    return priceList

# The function to get input from the user
def aquire():
    info = []
    time.sleep(1)
    name = str(1)
    #name = raw_input('Enter the full item name you want to search: ')
    info.append(name)
    pastDate = date.today() - timedelta(days=90)
    datestr = pastDate.strftime('%Y-%m-%d') + 'T00:00:00.000Z'
    info.append(datestr)
    return info

#The Method to get the median
def median(lst):
    lst = sorted(lst)
    if len(lst) < 1:
            return None
    if len(lst) %2 == 1:
            return lst[((len(lst)+1)/2)-1]
    else:
            return float(sum(lst[(len(lst)/2)-1:(len(lst)/2)+1]))/2.0

def GUI():
    main = Tkinter.Tk()
    frame1 = Frame(main)
    frame1.pack()
    frame2 = Frame(main)
    frame2.pack(side = BOTTOM)
    frame3 = Frame(main)
    frame3.pack(side = BOTTOM)

    header_Label = Label(frame1, text = "Ebay Price Checker")
    header_Label.pack()

    search_Label = Label(frame1, text = "Item Name:  ")
    search_Label.pack(side = LEFT)
    search_Box = Entry(frame1)
    search_Box.pack(fill = Tkinter.X, expand = 1, side = RIGHT)

    search_Button = Tkinter.Button(frame3, text = "Search", font = ("Comic Sans MS", "10"))
    search_Button.pack()

    main.mainloop()

def execute():
    itemInfo = aquire()
    priceList = createPriceList(itemInfo)
    print "Number of entries found: %s" % len(priceList)
    mean = sum(priceList)/float(len(priceList))
    print "The mean of the list is: $" + "{0:.2f}".format(mean)
    median = median(priceList)
    print "The median of the list is: $" + "{0:.2f}".format(median)
    sd = np.std(priceList)
    print "The standard deviation of the list is: $" + "{0:.2f}".format(sd)
    fig = plt.figure(1, figsize=(9,6))
    ax = fig.add_subplot(111)
    bp = ax.boxplot(priceList)
    fig.savefig('fig1.png', bbox_inches='tight')
    #for x in priceList:
        #print x

# The main events
GUI()
