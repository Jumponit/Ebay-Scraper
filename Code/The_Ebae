# The_Ebae.py
# The main program
# Taylor Morris & Nich Phillips & Lindsey Titus

from ebaysdk.finding import Connection as Finding
from ebaysdk.exception import ConnectionError
from datetime import date, timedelta, datetime
from collections import Counter
import numpy as np #requires a separate pip install
import matplotlib as mpl # requires a separate pip install
mpl.use('Tkagg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import time
import socket
import FileDialog
import Tkinter
from Tkinter import *
from PIL import ImageTk, Image

mean_Text = ''
med_Text = ''
category_List = []
category_Lookup = {}
prev_cat_item = ''


# The function that searches via the Ebay API
def search(itemInfo, pageNum):
    category = itemInfo[2]
    startDate = itemInfo[1]
    item = itemInfo[0]
    try:
        api = Finding(appid = "TaylorMo-1104-4ca1-bc59-34b44b585cf0", config_file = None)
        if category != None:
            api_request = {
                'keywords': item,
                'categoryId': [category],
                'itemFilter': [
                    {'name': 'SoldItemsOnly', 'value': True},
                    {'name': 'LocatedIn', 'value': 'US'},
                    {'name': 'EndTimeFrom', 'value': startDate}
                ],
                'paginationInput': [
                    {'pageNumber': pageNum}
                ]
            }
        else:
            api_request = {
                'keywords': item,
                'itemFilter': [
                    {'name': 'SoldItemsOnly', 'value': True},
                    {'name': 'LocatedIn', 'value': 'US'},
                    {'name': 'EndTimeFrom', 'value': startDate}
                ],
                'paginationInput': [
                    {'pageNumber': pageNum}
                ]
            }
        response = api.execute('findCompletedItems', api_request)
        return response.dict()
    except ConnectionError as e:
        print(e)
        print(e.response.dict())


# The method to parse the search response dictionary
def parseDict(dit):
    soldPrices = []
    sellDates = []
    conditions = []
    results = dit.get('searchResult')
    itemList = results.get('item')
    if (itemList != None):
        for item in itemList:
            shipInfo = item.get('shippingInfo')
            conditionInfo = item.get('condition')
            if (type(shipInfo) == dict and type(conditionInfo) == dict):
                shipServCost = shipInfo.get('shippingServiceCost')
                if (type(shipServCost) == dict):
                    shipCost = shipServCost.get('value')
                    shipping = float(shipCost)
                    sellStat = item.get('sellingStatus')
                    if (type(sellStat) == dict):
                        currentPrice = sellStat.get('convertedCurrentPrice')
                        if (type(currentPrice) == dict):
                            listInfo = item.get('listingInfo')
                            if (type(listInfo) == dict):
                                fullTime = listInfo.get('endTime')
                                times = fullTime.split('T')
                                aTime = times[0]
                                sellTime = datetime.strptime(aTime, "%Y-%m-%d")
                                sellDates.append(sellTime)
                            else:
                                continue
                            priceVal = currentPrice.get('value')
                            soldAmount = float(priceVal)
                            soldPrices.append((shipping + soldAmount))
                            condition = conditionInfo.get('conditionDisplayName')
                            conditions.append(condition)
                        else:
                            continue
                    else:
                        continue
                else:
                    continue
            else:
                continue

        dataDict = dict([('soldPrices', soldPrices), ('sellDates', sellDates), ('conditions', conditions)])
        return dataDict
    else:
        print "Error, invalid item name, no results"

        # Test events
        # print len(soldPrices)
        # for x in soldPrices:
        # print x


# Method to extend dict1 with info from dict2
def extendDict(dict1, dict2):
    keys = dict1.keys()
    for key in keys:
        dict1[key].extend(dict2[key])
    return dict1


#The method that does the multi-page loop of the search
def createDataDict(itemInfo):
    page = 1
    response = search(itemInfo, page)
    pageOutput = response.get('paginationOutput')
    pageNumbers = pageOutput.get('totalPages')
    print "Number of Pages = %s" % pageNumbers
    if (int(pageNumbers) > 1):
        print "First Search!"
        data = parseDict(response)
        page+= 1
        while page <= int(pageNumbers) and page < 100:
            print "Nap Time! Number: %s" % (page-1)
            time.sleep(3)
            if page < int(pageNumbers):
                print "OK! Next search!"
            try:
                data = extendDict(data, parseDict(search(itemInfo, page)))
            except socket.timeout:
                print "Caught a socket timeout! Moving on to next page"
            page+= 1
    else:
        data = parseDict(response)
    return data


# The function to get input from the user
def aquire(item_name, item_category):
    info = []
    time.sleep(1)
    name = item_name
    info.append(name)
    pastDate = date.today() - timedelta(days=90)
    datestr = pastDate.strftime('%Y-%m-%d') + 'T00:00:00.000Z'
    info.append(datestr)
    info.append(item_category)
    return info


#The Method to get the median
def median(lst):
    lst = sorted(lst)
    if len(lst) < 1:
            return None
    if len(lst) %2 == 1:
            return lst[((len(lst)+1)/2)-1]
    else:
            return float(sum(lst[(len(lst)/2)-1:(len(lst)/2)+1]))/2.0


#The function to get the desired category from the user
def initial_execute(item_name):
    global category_List
    global category_Lookup

    pastDate = date.today() - timedelta(days=90)
    datestr = pastDate.strftime('%Y-%m-%d') + 'T00:00:00.000Z'
    try:
        api = Finding(appid = "TaylorMo-1104-4ca1-bc59-34b44b585cf0", config_file = None)
        api_request = {
            'keywords': item_name,
            'itemFilter': [
                {'name': 'SoldItemsOnly', 'value': True},
                {'name': 'LocatedIn', 'value': 'US'},
                {'name': 'EndTimeFrom', 'value': datestr}
            ]
        }
        response = api.execute('findCompletedItems', api_request)
    except ConnectionError as e:
        print(e)

    results = response.dict().get('searchResult')
    itemList = results.get('item')
    catList = []
    if (itemList != None):
        for items in itemList:
            catList.append(items.get('primaryCategory').get('categoryName'))
            category_Lookup[items.get('primaryCategory').get('categoryName')] \
                = items.get('primaryCategory').get('categoryId')

    catDict = Counter(catList)
    category_List = sorted(catDict, key = catDict.__getitem__)
    category_List.reverse()


#The main execution of the search
def execute(item_name, item_category = None):
    global mean_Text
    global med_Text
    global prev_cat_item

    itemInfo = aquire(item_name, item_category)
    itemData = createDataDict(itemInfo)
    if (itemData is None):
        mean_Text = 'failed'
        return
    priceList = itemData.get('soldPrices')
    print "Number of entries found: %s" % len(priceList)
    mean = sum(priceList)/float(len(priceList))

    mean_Text = "${0:.2f}".format(mean)
    med = median(priceList)
    med_Text = "${0:.2f}".format(med)

    plt.clf()
    fig = plt.figure(1, figsize=(9, 6))  # create a figure object
    fig.suptitle("Scatter Plot and Histogram of %s Price Data Over Past 90 Days" % itemInfo[0])
    ax1 = fig.add_subplot(211)  # add a subplot to the figure object

    x = mpl.dates.date2num(itemData.get('sellDates'))
    y = priceList
    ax1.xaxis.set_major_formatter(mpl.dates.DateFormatter('%m/%d/%y'))
    mpl.dates.DateFormatter("%d/%m/%y")
    plt.plot_date(x, y, '.')
    m, b = np.polyfit(x, y, 1)

    endPoint = np.polyval([m, b], x[0])
    startPoint = np.polyval([m, b], x[len(x)-1])
    print "Start point of line is: $" + "{0:.2f}".format(startPoint)
    print "End point of line is: $" + "{0:.2f}".format(endPoint)
    accStr = "According to the line of best fit, the average price has "
    ovStr = " over the past 90 days."
    if (endPoint < startPoint):
        print accStr + "gone down $" + "{0:.2f}".format(startPoint-endPoint) + ovStr
    else:
        print accStr + "gone up $" + "{0:.2f}".format(endPoint-startPoint) + ovStr

    ax1.yaxis.set_ticks_position('both')
    plt.tick_params(axis='both', length='4', width='2', labelright='on', labelleft='on')
    plt.ylabel('Sale Price in USD')
    plt.plot(x, m * x + b, 'k-', lw='1.5')

    binNumber = len(priceList) / 10
    plt.subplot(212)
    plt.hist(priceList, bins=binNumber, histtype='step')
    plt.xlabel('Sale Price in USD')
    plt.ylabel('Percentage Frequency')
    plt.savefig("fig1.png", bbox_inches = 'tight')


#The function to create the GUI
def GUI():
    root = Tkinter.Tk()
    item_entry = Tkinter.StringVar()

    def irun():
        global prev_cat_item

        item_entry = search_Box.get()
        category_Select.delete(0, END)
        if item_entry != '' :
            initial_execute(item_entry)
            for cat in category_List:
                category_Select.insert(END, cat)
            mean_Display.config(text = "$0.00")
            median_Display.config(text = "$0.00")
            canvas.delete("all")
            prev_cat_item = item_entry

    def run():
        global category_Lookup

        item_entry = search_Box.get()
        if item_entry != '' :
            mean_Display.config(text='Searching...')
            median_Display.config(text='Please Wait...')
            root.update_idletasks()
            if category_Select.curselection() != None and prev_cat_item == item_entry:
                execute(item_entry, category_Lookup.get(category_Select.get(ACTIVE)))
                if (str(mean_Text) == 'failed'):
                    canvas.background = PhotoImage(file = "./SadSponge.gif")
                    pic = canvas.create_image(400, 270, image = canvas.background)
                    canvas.move(pic, -155, -125)
                    mean_Display.config(text = 'Search Failed')
                    median_Display.config(text = 'Try Something Else')
                    return

                mean_Display.config(text = str(mean_Text))
                median_Display.config(text = str(med_Text))
                graph = Image.open("fig1.png")
                graph = graph.resize((400, 270), Image.ANTIALIAS)
                im = Image.new('RGBA', graph.size, (255,255,255))
                im.paste(graph, graph)
                graph = im.convert('RGB').convert('P', palette = Image.ADAPTIVE)
                graph.save("fig.gif")
                canvas.background = PhotoImage(file = "./fig.gif")
                pic = canvas.create_image(400, 270, image = canvas.background)
                canvas.move(pic, -155, -125)
            else:
                execute(item_entry)
                if (str(mean_Text) == 'failed'):
                    canvas.background = PhotoImage(file="./SadSponge.gif")
                    pic = canvas.create_image(400, 270, image=canvas.background)
                    canvas.move(pic, -155, -125)
                    mean_Display.config(text="Search Failed")
                    median_Display.config(text="Try Something Else")
                    return

                mean_Display.config(text = str(mean_Text))
                median_Display.config(text = str(med_Text))
                graph = Image.open("fig1.png")
                graph = graph.resize((400, 270), Image.ANTIALIAS)
                im = Image.new('RGBA', graph.size, (255,255,255))
                im.paste(graph, graph)
                graph = im.convert('RGB').convert('P', palette = Image.ADAPTIVE)
                graph.save("fig.gif")
                canvas.background = PhotoImage(file = "./fig.gif")
                pic = canvas.create_image(400, 270, image = canvas.background)
                canvas.move(pic, -155, -125)

    root.wm_title("The Ebae")
    root.tk.call('wm', 'iconbitmap', root._w, '-default', './Price-Tag.ico')
    frame1 = Frame(root)
    frame1.grid(sticky = W)
    frame1.pack()
    frame2 = Frame(root)
    frame2.grid(sticky = W)
    frame2.pack()
    frame3 = Frame(root)
    frame3.grid(sticky = W)
    frame3.pack()
    frame4 = Frame(root)
    frame4.grid(sticky = W)
    frame4.pack(side = BOTTOM)

    header_Label = Label(frame1, text = "Ebay Price Checker", font = ("Ariel", "14"))
    header_Label.pack()

    search_Label = Label(frame2, text = "Item Name:  ")
    search_Label.grid(row = 0, column = 0)
    search_Box = Entry(frame2, textvariable = item_entry)
    search_Box.grid(row = 0, column = 1, columnspan = 2)

    category_Label = Label(frame2, text = "Category: ")
    category_Label.grid(row = 1, column = 0)
    category_Select = Listbox(frame2, selectmode = 'SINGLE')
    category_Select.grid(row = 1, column = 1, columnspan = 2)

    mean_Label = Label(frame3, text = "Mean Price: ")
    mean_Label.grid(row = 0, column = 0, sticky = E)
    mean_Display = Label(frame3, text = "$0.00")
    mean_Display.grid(row = 0, column = 1)

    median_Label = Label(frame3, text = "Median Price: ")
    median_Label.grid(row = 1, column = 0, sticky = E)
    median_Display = Label(frame3, text = "$0.00")
    median_Display.grid(row = 1, column = 1)

    initial_search_Button = Tkinter.Button(frame4,
                                   text = "Get Categories",
                                   font = ("Helvetica", 10),
                                   command = lambda: irun())
    initial_search_Button.grid(row = 0, column = 0, padx = 25)
    search_Button = Tkinter.Button(frame4,
                                   text = "Search",
                                   font = ("Helvetica", 10),
                                   command = lambda: run())
    search_Button.grid(row = 0, column = 1, padx = 25)
    
    canvas = Canvas(root, width = 480, height = 290)
    canvas.pack()

    def close():
        root.quit()

    root.protocol("WM_DELETE_WINDOW", close)

    root.mainloop()


GUI()

